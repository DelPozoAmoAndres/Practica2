DoubleLinkedListQueueTest.java------------------------------------------------------------------
    @Test
    @DisplayName("Constructor")
    void constructor() {}

    @Nested
    class Appending {
        @Test
        @DisplayName("append | primer elemento")
        void addRightFirst() {}

        @Test
        @DisplayName("append | varios elementos")
        void addRightMany() {}

        @Test
        @DisplayName("append | añadimos null y salta excepcion")
        void addRightError() {}

        @Test
        @DisplayName("appendLeft | primer elemento")
        void addLeftFirst() {}

        @Test
        @DisplayName("appendLeft | varios elementos")
        void addLeftMany() {}

        @Test
        @DisplayName("appendLeft | añadimos null y salta excepcion")
        void addLeftError() {}
    }

    @Nested
    class Deleting {
        @Test
        @DisplayName("deleteLast | un elemento")
        void deleteLastOne() {}

        @Test
        @DisplayName("deleteLast | varios elementos")
        void deleteLastMany() {}

        @Test
        @DisplayName("deleteLast | cola vacia y salta excepcion")
        void deleteLastError() {}

        @Test
        @DisplayName("deleteFirst | un elemento")
        void deleteFirstOne() {}

        @Test
        @DisplayName("deleteFirst | varios elementos")
        void deleteFirstMany() {}

        @Test
        @DisplayName("deleteFirst | cola vacia y salta excepcion")
        void deleteFirstError() {}
    }
	
    @Nested
    class GetAt {

        @ParameterizedTest
        @DisplayName("getAt | posicion dentro de los limites")
        void getAtValidPosition(int postion,int itemExpected) {}

        @Test
        @DisplayName("getAt | posicion negativa lanza excepcion")
        void getAtNegativePosition(){}

        @Test
        @DisplayName("getAt | posicion mayor que size lanza excepcion")
        void getAtInvalidPosition(){}
    }

    @Nested
    class Find {
       
        @Test
        @DisplayName("find | elementos existentes")
        void findValidElements() {}

        @Test
        @DisplayName("find | elemento inexistente")
        void findInValidElement() {}

        @Test
        @DisplayName("find | elemento null lanza excepcion")
        void findNullElement() {}

    }

    @Nested
    class Delete {

        @Test
        @DisplayName("Delete | elemento null lanza excepcion")
        void DeleteNullElement() {}

        @Test
        @DisplayName("Delete | un unico elemento en la lista")
        void DeleteUnicoElement() {}

        @Test
        @DisplayName("Delete | primer elemento en la lista")
        void DeleteFirstElement() {}

        @Test
        @DisplayName("Delete | ultimo elemento en la lista")
        void DeleteLastElement() {
            //Arange
            var length=cola.size();
            //Act
            cola.delete(cola.find(3));
            // Assert
            assertThrowsExactly(RuntimeException.class,()->cola.find(3));
            assertEquals(length-1,cola.size());
        }

        @Test
        @DisplayName("Delete | elemento intermedio de la lista")
        void DeleteMiddleElement() {}

        @Test
        @DisplayName("Delete | todos los elementos")
        void DeleteAllElements() {}

        @Test
        @DisplayName("Delete | elemento no existente en la lista")
        void DeleteInvalidElement() {}


    }

    @Nested
    class Sort {
        
        @Test
        @DisplayName("Sort | solo un elemento en la lista")
        void sortOneElement() {}

        @Test
        @DisplayName("Sort | mas de 1 elemento en la lista")
        void sortManyElement() {}

    }

DequeNodeTest.java---------------------------------------------------------------------------------------
    @Nested
    class Constructor {
        @Test
        @DisplayName("Constructor con Item")
        void ConstructorItem() {}

        @Test
        @DisplayName("Constructor con Item, Next, Previous")
        void ConstructorTodosParametros() {}
    }

    @Nested
    class IsLast {
        @Test
        @DisplayName("isLastNode | Es el último")
        void esUltimo() {}

        @Test
        @DisplayName("isLastNode | No es el último")
        void noEsUltimo() {}
    }

    @Nested
    class isFirst {
        @Test
        @DisplayName("isFirstNode | Es el primero")
        void esElPrimero() {}

        @Test
        @DisplayName("isFirstNode | No es el primero")
        void noEsElPrimero() {}
    }

    @Nested
    class isNotATerminal {
        @Test
        @DisplayName("isNotATerminalNode | Es intermedio")
        void esUnoIntermedio() {}

        @Test
        @DisplayName("isNotATerminalNode | No es intermedio, es el primero")
        void noEsUnoIntermedioEsPrimero() {}

        @Test
        @DisplayName("isNotATerminalNode | No es intermedio, es el último")
        void noEsUnoIntermedioEsUltimo() {}
    }
}

